// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

// TODO: check if everything is correct especially the `onDelete`
// Core
model Board {
    id          String   @id @default(cuid())
    name        String
    description String?
    columns     Column[]

    @@map(name: "boards")
}

model Column {
    id      String @id @default(cuid())
    name    String
    boardId String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    tasks   Task[]
    order   Int    @default(1)

    @@map(name: "columns")
}

model Task {
    id          String  @id @default(cuid())
    title       String
    description String?
    order       Int     @default(1)
    subtasks    Subtask[]

    columnId String
    column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@map(name: "tasks")
}

model Subtask {
  id String @id @default(cuid())
  title String
  description String?
  order Int @default(1)
  completed Boolean @default(false) // subject to change

  taskId String
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map(name: "subtasks")
}
